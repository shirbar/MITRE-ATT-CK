import os
import sqlite3

#from openpyxl import load_workbook
import re



def invert_malware_hash_map(mitre_hash_map):
    new_dic = {}
    for k, v in mitre_hash_map.items():
        for x in v:
            if '-' not in x:
                new_dic.setdefault(int(x), []).append(k)
    return new_dic

# This function save the mitre cti tuple to Malware.db file
def save_Malware_to_db(MalwareHashMap):
    conn = sqlite3.connect("Databases/Malware.db")    #"./Databases/MalWare.db")
    cur = conn.cursor()
    create = "CREATE TABLE IF NOT EXISTS malware( event_id INT, ttp TEXT);"
    cur.execute(create)  # execute SQL commands
    conn.commit()

    malware_data = MalwareHashMap
    malware_data = [(int(i), str(malware_data[i])) for i in malware_data]
    insert_command = "INSERT INTO malware VALUES(?,?);"

    cur.executemany(insert_command, malware_data)
    conn.commit()
    show_db()

# this function shwos the data inside Malware.db
def show_db():
    conn = sqlite3.connect("Databases/Malware.db") #"Databases/Malware.db")
    cur = conn.cursor()
    cur.execute("SELECT name FROM sqlite_master WHERE type='table';")  # show all the tables in the .db file
    print("Malware.db__________________________________________________________________________________")
    print(cur.fetchall())
    cur.execute("SELECT * FROM Malware")  # show all the data inside Malware table/
    print(cur.fetchall())
    names = list(map(lambda x: x[0], cur.description))  # show all the columns names
    print(names)
    print("Malware.db_end______________________________________________________________________________")






# This function extract only the event IDs from a string, using a regular expressions library,
# returns a list of event IDs
def extract_event_id_from_str(string):
    return re.findall('[\d]*[-][\d]+|[\d]+[.\d]+', string)

def get_malware_hash_map():

    # Open Malware Archaeology excels sheet file
    workbook = load_workbook(filename="WindowsMalware.xlsx")
    sheet = workbook["Win_Logging_Basic"]

    # initialize sheet values that are necessary for create the hashmap
    rowsNum = sheet.max_row
    columnsNum = sheet.max_column
    Green_Hex = "FF92D050"
    Yellow_Hex = "FFFFFF00"

    # Create a malware HashMap
    MalwareHashMap = {}

    # Run on the cells in the sheet for creating the hashmap
    for i in range(6, rowsNum):
        Tactic = sheet.cell(i, 4).value
        for j in range(5, columnsNum):
            cellColor = str(sheet.cell(i, j).fill.start_color.index)
            if cellColor == Green_Hex or cellColor == Yellow_Hex:
                cell = str(sheet.cell(i, j).value)
                eventIDs = extract_event_id_from_str(cell)
                MalwareHashMap[Tactic] = eventIDs
            else:
                continue
    print(MalwareHashMap)
    print(invert_malware_hash_map(MalwareHashMap))
    save_Malware_to_db(invert_malware_hash_map(MalwareHashMap))


def get_Malware_Archaeology_HashMap_from_db():
    #print("im hear")
    MalwareHashMap = {}
    if not os.path.exists("Databases/Malware.db"):             #"Databases/Malware.db"):  # or "Databases/Malware.db"
        get_malware_hash_map()
    try:
        sqliteConnection = sqlite3.connect("Databases/Malware.db")    #"Databases/Malware.db")
        cursor = sqliteConnection.cursor()
        sqlite_select_Query = "select event_id, ttp from malware"
        cursor.execute(sqlite_select_Query)
        record = cursor.fetchall()
        #print(MalwareHashMap)
        for rec in record:
            if rec[0] in MalwareHashMap.keys():
                MalwareHashMap[int(rec[0])].append(rec[1])
            else:
                # print(rec[0])
                MalwareHashMap[int(rec[0])] = [rec[1]]
        cursor.close()
        sqliteConnection.close()
        #print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
        #print(MalwareHashMap)
        #print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")




        return MalwareHashMap

    except sqlite3.Error as error:
        print("error while connecting to sqlite ", error)



#save_Malware_to_db()
#get_malware_hash_map()
#show_db()
#print(get_Malware_Archaeology_HashMap_from_db())

